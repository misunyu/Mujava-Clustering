////////////////////////////////////////////////////////////////////////////
// Module : PPD_Writer.java
// Author : Ma, Yu-Seung
// COPYRIGHT 2005 by Yu-Seung Ma, ALL RIGHTS RESERVED.
////////////////////////////////////////////////////////////////////////////

package mujava.op;

import java.io.IOException;

import mujava.IMutantInfo;
import mugamma.MutantCodeWriter;
import openjava.ptree.MethodDeclaration;
import openjava.ptree.Parameter;
import openjava.ptree.ParseTree;
import openjava.ptree.ParseTreeException;
import openjava.ptree.StatementList;

/**
 * <p>
 * Description:
 * </p>
 * <p>
 * Copyright: Copyright (c) 2005 by Yu-Seung Ma, ALL RIGHTS RESERVED
 * </p>
 * 
 * @author Yu-Seung Ma
 * @version 1.0
 */

public class PPD_Writer extends MutantCodeWriter {
	Parameter original = null;

	Parameter mutant = null;

	MethodDeclaration targetMethod = null;

	StatementList targetStmts = null;

	public void setMutant(MethodDeclaration m, Parameter original,
			Parameter mutant) {
		this.targetMethod = m;
		this.original = original;
		this.mutant = mutant;
		this.targetStmts = m.getBody();
	}

	public PPD_Writer(IMutantInfo mutantFile) throws IOException {
		super(mutantFile);
	}

	boolean eq(ParseTree p, ParseTree q) {
		if (p == null && q == null)
			return true;
		if (p == null || q == null)
			return false;
		return (p.getObjectID() == q.getObjectID());
	}

	public void visit(StatementList p) throws ParseTreeException {
		if (eq(p, targetStmts)) {
			super.mutantInfo.setChangeLocation(getLineNumber());
			writeTab();
			out.println(mutant.toString() + " = ("
					+ mutant.getTypeSpecifier().getName() + ")_"
					+ original.getVariable() + ";");
			increaseLineNumber();
			super.mutantInfo.setChangeLog(removeNewline(original.toString() + " => "
					+ mutant.toString()));
		}
		writeList(p);
	}

	public void visit(Parameter p) throws ParseTreeException {
		if (eq(p, original)) {
			// -------------------------------------------------------------
			// mutated_line = line_num;
			Parameter temp = (Parameter) p.makeRecursiveCopy();
			temp.setVariable("_" + p.getVariable());
			visit(temp);
			// writeLog(removeNewline(original.toString()+" =>
			// "+mutant.toString()));
			// -------------------------------------------------------------
		} else {
			super.visit(p);
		}
	}
}
