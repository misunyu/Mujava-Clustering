////////////////////////////////////////////////////////////////////////////
// Module : IOR.java
// Author : Ma, Yu-Seung
// COPYRIGHT 2005 by Yu-Seung Ma, ALL RIGHTS RESERVED.
////////////////////////////////////////////////////////////////////////////

package mujava.op;

import java.io.IOException;
import java.lang.reflect.Method;
import java.lang.reflect.Modifier;
import java.util.Stack;

import mujava.IMutantInfo;
import mujava.MutantManager;
import mujava.MutantTable;
import mujava.MuJavaProject;
import mujava.ProjectManager;
import org.eclipse.jdt.core.IJavaElement;
import mujava.gen.GenericCodeWriter;
import openjava.mop.FileEnvironment;
import openjava.ptree.ClassDeclaration;
import openjava.ptree.CompilationUnit;
import openjava.ptree.MethodDeclaration;
import openjava.ptree.ParameterList;
import openjava.ptree.ParseTreeException;
import openjava.ptree.StatementList;

/**
 * <p>Description: Generate IOR mutants</p>
 * <p>Copyright: Copyright (c) 2005 by Yu-Seung Ma, ALL RIGHTS RESERVED </p>
 * @author Yu-Seung Ma
 * @version 1.0
 */

public class IOR extends mujava.op.util.Mutator {
	Stack s;

	Class parent_class = null;

	FileEnvironment parent_file_env = null;

	CompilationUnit parent_comp_unit = null;

	public void setParentEnv(FileEnvironment file_env, CompilationUnit comp_unit) {
		parent_file_env = file_env;
		parent_comp_unit = comp_unit;
	}

	public IOR(MuJavaProject project, IJavaElement originalSourceFile, FileEnvironment file_env,
			ClassDeclaration cdecl, CompilationUnit comp_unit) {
		super(file_env, comp_unit, project, originalSourceFile, "IOR");
		s = new Stack();
	}

	public void visit(ClassDeclaration p) throws ParseTreeException {
		s.push(p.getName());
		super.visit(p);
		s.pop();
	}

	public void visit(MethodDeclaration p) throws ParseTreeException {
		if (p.getName().equals("main"))
			return;
		if (isOverridingMethod(p)) {
			if (!isIOREquivalent(p))
				outputToFile(parent_comp_unit, p);
		} else {
			return;
		}
	}

	boolean isIOREquivalent(MethodDeclaration p) {
		IOR_Equivalent obj = new IOR_Equivalent(super.getSourceJavaElement(),
				parent_file_env, parent_comp_unit);
		
		String str = parent_class.getName();
		int index = str.lastIndexOf(".");
		if (index >= 0) {
			str = str.substring(index + 1, str.length());
		}
		obj.setInformation(str, p);

		try {
			parent_comp_unit.accept(obj);
			return (obj.isEquivalent());
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}

	}

	boolean isOverridingMethod(MethodDeclaration p) {
		String target_class = targetClass.getPackage();
		for (int i = 0; i < s.size(); i++) {
			if (i == 0) {
				if (target_class == null) {
					target_class = s.get(i).toString();
				} else {
					target_class = target_class + "." + s.get(i).toString();
				}
			} else {
				target_class = target_class + "$" + s.get(i).toString();
			}
		}
		try {
			parent_class = Class.forName(target_class).getSuperclass();
			if ((parent_class == null)
					|| (parent_class.getName().equals("java.lang.Object")))
				return false;
			Method[] parent_method = parent_class.getDeclaredMethods();
			if (parent_method == null)
				return false;
			for (int i = 0; i < parent_method.length; i++) {
				//System.out.println(i + "  " + p.getName()+ " : " + parent_method[i].getName());
				if (Modifier.isAbstract(parent_method[i].getModifiers()))
					continue;
				if (!(parent_method[i].getName().equals(p.getName())))
					continue;
				if (!(parent_method[i].getReturnType().getName().equals(p
						.getReturnType().getName())))
					continue;
				Class[] parent_par = parent_method[i].getParameterTypes();
				ParameterList child_parList = p.getParameters();
				int size = child_parList.size();
				if (((parent_par == null) || (parent_par.length == 0))
						&& (size == 0)) {
					return true;
				}
				if (parent_par.length != size)
					continue;
				boolean isFound = true;
				for (int j = 0; j < size; j++) {
					//System.out.print(parent_par[j].getName()+" : " + child_parList.get(j).getTypeSpecifier().getName());
					if (!(parent_par[j].getName().equals(child_parList.get(j)
							.getTypeSpecifier().getName()))) {
						isFound = false;
						break;
					}
				}
				if (isFound)
					return true;
			}
			return false;
		} catch (ClassNotFoundException e) {
			System.out.println(" [Exception at IOD mutant generator]");
			e.printStackTrace();
		}
		return false;
	}

	//TODO swkim
	//  String getFileName(){
	//      // make directory for the mutant
	//      String dir_name = MutationSystem.MUTANT_PATH + "/" + getClassName()
	//				+ "_" + super.getCountGeneratedMutant();
	//      File f = new File(dir_name);
	//      f.mkdir();
	//      String file_name = parent_class.getName();
	//      file_name = file_name.substring(file_name.lastIndexOf(".")+1,file_name.length());
	//      return(dir_name + "/" +  file_name+".java");
	//  }

	
//	private void copyOriginalForCompile(CompilationUnit comp_unit) {
//		if (comp_unit == null)
//			return;
//		String f_name;
//		f_name = getSourceName(this);
//		String mutant_dir = getMuantID();
//		try {
//			PrintWriter out = getPrintWriter(f_name);
//			ScopeHandlingMutantCodeWriter writer = new ScopeHandlingMutantCodeWriter(
//					parent_file_env, mutantFile, out);
//			comp_unit.accept(writer);
//			out.flush();
//			out.close();
//		} catch (IOException e) {
//			System.err.println("fails to create " + f_name);
//		} catch (ParseTreeException e) {
//			System.err.println("errors during printing " + f_name);
//			e.printStackTrace();
//		}
//	}
	@Override
	protected int getMutantType() {
		return IMutantInfo.CLASS;
	}

	@Override
	protected GenericCodeWriter getMutantCodeWriter(IMutantInfo mutantFile, Object[] args) throws IOException {
		if (args.length == 2 && args[0] instanceof CompilationUnit
				&& args[1] instanceof MethodDeclaration) {
			IOR_Writer mutantWriter = new IOR_Writer(parent_file_env,
					mutantFile);
			mutantWriter.setMutant((MethodDeclaration) args[0]);
			return mutantWriter;
		}
		assert (false);
		return null;
	}
}
