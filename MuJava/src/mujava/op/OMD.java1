////////////////////////////////////////////////////////////////////////////
// Module : OMD.java
// Author : Ma, Yu-Seung
// COPYRIGHT 2005 by Yu-Seung Ma, ALL RIGHTS RESERVED.
////////////////////////////////////////////////////////////////////////////

package mujava.op;

import java.io.IOException;

import mujava.IMutantInfo;
import mujava.MutantManager;
import mujava.MutantTable;
import mujava.MuJavaProject;
import mujava.ProjectManager;
import org.eclipse.jdt.core.IJavaElement;
import mujava.gen.GenericCodeWriter;
import mujava.op.util.DeclAnalyzer;
import openjava.mop.CannotAlterException;
import openjava.mop.OJClass;
import openjava.mop.OJClassNotFoundException;
import openjava.mop.OJMethod;
import openjava.ptree.CompilationUnit;
import openjava.ptree.MethodDeclaration;
import openjava.ptree.ParseTreeException;

/**
 * <p>
 * Description:
 * </p>
 * <p>
 * Copyright: Copyright (c) 2005 by Yu-Seung Ma, ALL RIGHTS RESERVED
 * </p>
 * 
 * @author Yu-Seung Ma
 * @version 1.0
 */

public class OMD extends DeclAnalyzer {

	private final int BIG = 1;

	private final int SMALL = 2;

	private final int AMBIGUOUS = 0;

	private final String[] primitives = { "char", "short", "int", "long",
			"unsigned", "unsigned long", "float", "double", "lond double" };

	public void translateDefinition(CompilationUnit comp_unit)
			throws openjava.mop.MOPException {
		int i, j, num;
		String name1, name2;

		OJMethod[] m = getDeclaredMethods();

		boolean[] checked = new boolean[m.length];
		int[] compatable_method = new int[m.length];
		for (i = 0; i < m.length; i++) {
			checked[i] = false;
			compatable_method[i] = -1;

		}

		// Check if overloading methods exist
		for (i = 0; i < m.length; i++) {
			for (j = 0; j < m.length; j++) {
				if (j != i) {
					if (omdPossible(m[i], m[j])) {
						checked[i] = true;
						compatable_method[i] = j;
						break;
					}
				}
			}
		}

		for (i = 0; i < m.length; i++) {
			if (checked[i]) {
				try {
					MethodDeclaration original = m[i].getSourceCode();
					OJClass[] mutant_pars = m[compatable_method[i]]
							.getParameterTypes();
					outputToFile(original, m[compatable_method[i]]);
					// outputToFile(comp_unit,original,mutant_pars);
				} catch (CannotAlterException e) {
					System.err.println("[Error] " + e);
					e.printStackTrace();
				}
			}
		}
	}

	private boolean omdPossible(OJMethod m1, OJMethod m2) {
		// step 1: it shold be same name
		if (!(m1.getName().equals(m2.getName())))
			return false;

		// step 2: it should have compatible index
		if (m1.getParameterTypes().length == 0)
			return false;
		if (m1.getParameterTypes().length != m2.getParameterTypes().length)
			return false;

		int[] related_index = new int[m1.getParameterTypes().length];

		related_index = getCompatibleParameterIndex(m1.getParameterTypes(), m2
				.getParameterTypes());
		if (related_index != null) {
			return true;
		}
		return false;
	}

	private boolean same(OJClass[] s1, OJClass[] s2) {
		if (s1 == null && s2 == null)
			return true;
		else if (s1 == null || s2 == null)
			return false;
		if (s1.length != s2.length)
			return false;
		for (int i = 0; i < s1.length; i++) {
			if (!(s1[i].getName().equals(s2[i].getName())))
				return false;
		}
		return true;
	}

	private int getPrimitiveIndex(String s) {
		for (int i = 0; i < primitives.length; i++) {
			if (s.equals(primitives[i]))
				return (i + 1);
		}
		return 0;
	}

	private int relatedDifferentIndex(String small, String big) {
		int small_index = getPrimitiveIndex(small);
		int big_index = getPrimitiveIndex(big);

		if (small_index > 0) {
			if (big_index > 2) { // from int-> long -> ... ...
				if (big_index > small_index)
					return (big_index - small_index);
			}
		} else {
			try {
				String name = small;
				OJClass clazz;
				int temp = 0;
				while (true) {
					temp++;
					clazz = OJClass.forName(name).getSuperclass();
					if ((clazz == null)
							|| (clazz.getName().equals("java.lang.Object")))
						return 0;
					name = clazz.getName();
					if (name.equals("java.lang.Object"))
						return 0;
					if (big.equals(name))
						return temp;
				}
			} catch (OJClassNotFoundException e) {
				return 0;
				// }catch(CannotAlterException cae){
				// return false;
			}
		}
		return 0;
	}

	private int[] getCompatibleParameterIndex(OJClass[] smallP, OJClass[] bigP) {
		if (smallP == null || bigP == null)
			return null;
		if (smallP.length != bigP.length)
			return null;
		if (same(smallP, bigP))
			return null;

		int[] results = new int[smallP.length];

		int num = 0;
		boolean diff = false;
		for (int i = 0; i < smallP.length; i++) {
			results[i] = relatedDifferentIndex(smallP[i].getName(), bigP[i]
					.getName());
			if (results[i] != 0)
				diff = true;
		}
		if (!diff)
			return null;
		else
			return results;
	}

	public OMD(MuJavaProject project, IJavaElement originalSourceFile,
			openjava.mop.Environment oj_param0, openjava.mop.OJClass oj_param1,
			openjava.ptree.ClassDeclaration oj_param2) {
		super(oj_param0, oj_param1, oj_param2, project, originalSourceFile, "OMD");
	}

	@Override
	protected int getMutantType() {
		return IMutantInfo.CLASS;
	}

	@Override
	protected GenericCodeWriter getMutantCodeWriter(IMutantInfo mutantFile,
			Object[] args) throws IOException {
		if (args.length == 2 && args[0] instanceof MethodDeclaration
				&& args[1] instanceof OJMethod) {
			OMD_Writer mutantWriter = new OMD_Writer(mutantFile);
			mutantWriter.setMutant((MethodDeclaration) args[0],
					(OJMethod) args[1]);
			return mutantWriter;
		}

		assert (false);
		return null;
	}
}
