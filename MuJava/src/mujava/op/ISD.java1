////////////////////////////////////////////////////////////////////////////
// Module : ISD.java
// Author : Ma, Yu-Seung
// COPYRIGHT 2005 by Yu-Seung Ma, ALL RIGHTS RESERVED.
////////////////////////////////////////////////////////////////////////////

package mujava.op;

import java.io.IOException;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.Stack;
import java.util.Vector;

import mujava.IMutantInfo;
import mujava.MutantManager;
import mujava.MutantTable;
import mujava.MuJavaProject;
import mujava.ProjectManager;
import org.eclipse.jdt.core.IJavaElement;
import mujava.gen.GenericCodeWriter;
import openjava.mop.FileEnvironment;
import openjava.mop.OJClass;
import openjava.mop.OJMethod;
import openjava.ptree.AssignmentExpression;
import openjava.ptree.ClassDeclaration;
import openjava.ptree.CompilationUnit;
import openjava.ptree.Expression;
import openjava.ptree.ExpressionList;
import openjava.ptree.FieldAccess;
import openjava.ptree.MethodCall;
import openjava.ptree.MethodDeclaration;
import openjava.ptree.ParameterList;
import openjava.ptree.ParseTreeException;
import openjava.ptree.SelfAccess;
import openjava.ptree.Variable;

/**
 * <p>
 * Description: Generate ISI and ISD mutants
 * </p>
 * <p>
 * Copyright: Copyright (c) 2005 by Yu-Seung Ma, ALL RIGHTS RESERVED
 * </p>
 * 
 * @author Yu-Seung Ma
 * @version 1.0
 */

public class ISD extends mujava.op.util.Mutator {

	MethodDeclaration current_method;

	Stack fieldStack = new Stack();

	Stack methodStack = new Stack();

	Stack s = new Stack();

	Vector overridingFields = new Vector();

	Vector overridingMethods = new Vector();

	Class parent = null;

	int nesting = 0;

	public ISD(MuJavaProject project, IJavaElement originalSourceFile, FileEnvironment file_env,
			ClassDeclaration cdecl, CompilationUnit comp_unit) {
		super(file_env, comp_unit, project, originalSourceFile, "ISD");
	}

	public void visit(ClassDeclaration p) throws ParseTreeException {
		this.evaluateDown(p);

		// TODO swkim need to verify className
		IJavaElement src = super.getSourceJavaElement();
		String className = src.getElementName();

		if (p.getName().equals(className)) {
			nesting = 1;
		} else if (nesting == 0) {
			this.evaluateUp(p);
			return;
		} else {
			nesting++;
			fieldStack.add(overridingFields);
			methodStack.add(overridingMethods);
			overridingFields = new Vector();
			overridingMethods = new Vector();
		}

		s.push(p.getName());

		String package_name = targetClass.getPackage();
		String target_class = "";
		if ((package_name == null) || (package_name.equals("null"))) {
			for (int i = 0; i < s.size(); i++) {
				if (i == 0) {
					target_class = s.get(i).toString();
				} else {
					target_class = target_class + "$" + s.get(i).toString();
				}
			}
		} else {
			target_class = package_name;
			for (int i = 0; i < s.size(); i++) {
				if (i == 0) {
					target_class = target_class + "." + s.get(i).toString();
				} else {
					target_class = target_class + "$" + s.get(i).toString();
				}
			}
		}

		try {
			parent = Class.forName(target_class).getSuperclass();
			if ((parent == null)
					|| (parent.getName().equals("java.lang.Object")))
				return;
			// Examine overriding methods, hiding variables.
			Class clazz = Class.forName(target_class);
			if (clazz == null)
				return;
			Method[] child_ms = clazz.getDeclaredMethods();
			Method[] parent_ms = parent.getDeclaredMethods();
			if ((child_ms == null) || (parent_ms == null))
				return;
			for (int i = 0; i < child_ms.length; i++) {
				for (int j = 0; j < parent_ms.length; j++) {
					if ((i == 2) && (j == 19)) {
						int a = 9;
					}

					if (!(child_ms[i].getName().equals(parent_ms[j].getName())))
						continue;
					if (!sameReturnType(child_ms[i].getReturnType(),
							parent_ms[j].getReturnType()))
						continue;
					if (!sameParameterType(child_ms[i].getParameterTypes(),
							parent_ms[j].getParameterTypes()))
						continue;
					overridingMethods.add(child_ms[i]);
				}
			}

			Field[] child_fs = clazz.getDeclaredFields();
			Field[] parent_fs = parent.getDeclaredFields();
			for (int i = 0; i < child_fs.length; i++) {
				for (int j = 0; j < parent_fs.length; j++) {
					if (!(child_fs[i].getName().equals(parent_fs[j].getName())))
						continue;
					if (!(child_fs[i].getType().getName().equals(parent_fs[j]
							.getType().getName())))
						continue;
					overridingFields.add(p.getName());
				}
			}
			p.childrenAccept(this);
		} catch (ClassNotFoundException e) {
		}
		s.pop();
		if (nesting > 1) {
			overridingFields = (Vector) fieldStack.pop();
			overridingMethods = (Vector) methodStack.pop();
			nesting--;
		}
		this.evaluateUp(p);
	}

	boolean sameReturnType(Class c1, Class c2) {
		if ((c1 == null) && (c2 == null))
			return true;
		if ((c1 == null) || (c2 == null))
			return false;
		if (c1.getName().equals(c2.getName()))
			return true;
		return false;
	}

	boolean sameParameterType(Class[] par1, Class[] par2) {
		if ((par1 == null) || (par1.length == 0)) {
			if ((par2 == null) || (par2.length == 0))
				return true;
			else
				return false;
		}

		if (par1.length != par2.length)
			return false;

		for (int i = 0; i < par1.length; i++) {
			if (!(par1[i].getName().equals(par2[i].getName())))
				return false;
		}
		return true;
	}

	boolean sameParameterType(Class[] par1, ParameterList par2) {
		if ((par1 == null) || (par1.length == 0)) {
			if ((par2 == null) || (par2.size() == 0))
				return true;
			else
				return false;
		}

		if (par1.length != par2.size())
			return false;

		for (int i = 0; i < par1.length; i++) {
			if (!(par1[i].getName().equals(par2.get(i).getTypeSpecifier()
					.getName())))
				return false;
		}
		return true;
	}

	public void visit(MethodDeclaration p) throws ParseTreeException {
		current_method = p;
		super.visit(p);
	}

	public void visit(FieldAccess p) throws ParseTreeException {
		Expression ref_exp = p.getReferenceExpr();
		if (ref_exp instanceof SelfAccess) {
			if (((SelfAccess) ref_exp).getAccessType() == SelfAccess.SUPER) {
				FieldAccess mutant = (FieldAccess) p.makeRecursiveCopy();
				mutant.setReferenceExpr(null);
				outputToFile(p, mutant);
			}
		}
	}

	public void visit(AssignmentExpression p) throws ParseTreeException {
		Expression newp = this.evaluateDown(p);
		if (newp != p) {
			p.replace(newp);
			return;
		}
		p.childrenAccept(this);
		newp = this.evaluateUp(p);
		if (newp != p)
			p.replace(newp);
	}

	boolean isDifinedMethod(MethodCall p) {
		try {
			OJClass clazz = getSelfType();
			OJMethod[] ms = clazz.getDeclaredMethods();
			for (int i = 0; i < ms.length; i++) {
				if (isSameMethod(ms[i], p))
					return true;
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return false;
	}

	boolean isSameMethod(OJMethod m, MethodCall p) {
		try {
			if (!(m.getName().equals(p.getName())))
				return false;
			if (!(m.getReturnType().getName().equals(getType(p).getName())))
				return false;
			ExpressionList elist = p.getArguments();
			OJClass[] plist = m.getParameterTypes();
			if ((elist == null) && (plist == null))
				return true;
			if (((elist != null) && (plist == null))
					|| ((elist == null) && (plist != null)))
				return false;
			if (elist.size() != plist.length)
				return false;
			for (int j = 0; j < elist.size(); j++) {
				OJClass type = getType(elist.get(j));
				if (!(type.getName().equals(plist[j].getName()))) {
					return false;
				}
			}
			return true;
		} catch (Exception e) {
			e.printStackTrace();
		}
		return true;
	}

	public void visit(MethodCall p) throws ParseTreeException {
		Expression lexp = p.getReferenceExpr();
		if (lexp != null) {
			if (lexp instanceof SelfAccess) {
				if ((((SelfAccess) lexp).getAccessType() == SelfAccess.SUPER)
						&& !(occurRecursive(p)) && isDifinedMethod(p)) {
					MethodCall mutant;
					mutant = (MethodCall) p.makeRecursiveCopy();
					mutant.setReferenceExpr(null);
					outputToFile(p, mutant);
				}
			} else if (lexp instanceof FieldAccess) {
				super.visit(p);
			}
		} else {
			if (isOverridingMethodCall(p)) {
				String opName = this.getOperatorName();
				super.setOperatorName("ISI");
				outputToFile(p);
				super.setOperatorName(opName);
			}
		}
	}

	boolean isOverridingMethodCall(MethodCall p) {
		try {
			for (int i = 0; i < overridingMethods.size(); i++) {
				Method m = (Method) overridingMethods.get(i);
				if (!(p.getName().equals(m.getName())))
					continue;
				ExpressionList elist = p.getArguments();
				Class[] plist = m.getParameterTypes();
				if ((elist == null) && (plist == null))
					return true;
				if (((elist != null) && (plist == null))
						|| ((elist == null) && (plist != null)))
					continue;
				boolean found = true;
				if (elist.size() != plist.length)
					continue;
				for (int j = 0; j < elist.size(); j++) {
					OJClass type = getType(elist.get(j));
					if (!(type.getName().equals(plist[j].getName()))) {
						found = false;
						break;
					}
				}
				if (found)
					return true;
				else
					return false;
			}
			return false;
		} catch (ParseTreeException e) {
			return false;
		}
	}

	public void visit(Variable p) throws ParseTreeException {
		for (int i = 0; i < overridingFields.size(); i++) {
			if (p.toString().equals(overridingFields.get(i).toString())) {
				String opName = this.getOperatorName();
				super.setOperatorName("ISI");
				outputToFile(p);
				super.setOperatorName(opName);
			}
		}
	}

	private boolean occurRecursive(MethodCall p) {
		// compare method name
		if (!(p.getName()).equals(current_method.getName()))
			return false;

		ExpressionList args = p.getArguments();
		ParameterList pars = current_method.getParameters();

		// compare parameter number
		if (pars.size() != args.size())
			return false;
		if ((pars.size() == 0) && (args.size() == 0))
			return true;

		// compare paremeter type
		if (pars.size() > 0) {
			try {
				String par_type;
				String arg_type;
				for (int i = 0; i < pars.size(); i++) {
					par_type = pars.get(i).getTypeSpecifier().getName();
					arg_type = (getType(args.get(i))).getName();
					if (!(par_type.equals(arg_type)))
						return false;
				}
			} catch (Exception e) {
				return false;
			}
		}
		return true;
	}



	@Override
	protected GenericCodeWriter getMutantCodeWriter(IMutantInfo mutantFile,
			Object[] args) throws IOException {
		if (args.length == 1) {
			if (args[0] instanceof Variable) {
				ISI_Writer mutantWriter = new ISI_Writer(mutantFile);
				mutantWriter.setMutant((Variable) args[0]);
				return mutantWriter;
			} else if (args[0] instanceof MethodCall) {
				ISI_Writer mutantWriter = new ISI_Writer(mutantFile);
				mutantWriter.setMutant((MethodCall) args[0]);
				return mutantWriter;
			}
		} else if (args.length == 2) {
			if (args[0] instanceof FieldAccess
					&& args[1] instanceof FieldAccess) {
				ISK_JTD_Writer mutantWriter = new ISK_JTD_Writer(mutantFile);
				mutantWriter.setMutant((FieldAccess) args[0],
						(FieldAccess) args[1]);
				return mutantWriter;
			} else if (args[0] instanceof MethodCall
					&& args[1] instanceof MethodCall) {
				ISK_JTD_Writer mutantWriter = new ISK_JTD_Writer(mutantFile);
				mutantWriter.setMutant((MethodCall) args[0],
						(MethodCall) args[1]);
				return mutantWriter;
			}
		}
		assert (false);
		return null;
	}
}
