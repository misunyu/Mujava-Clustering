////////////////////////////////////////////////////////////////////////////
// Module : JSI.java
// Author : Ma, Yu-Seung
// COPYRIGHT 2005 by Yu-Seung Ma, ALL RIGHTS RESERVED.
////////////////////////////////////////////////////////////////////////////

package mujava.op;

import java.io.IOException;
import java.util.Vector;

import mujava.IMutantInfo;
import mujava.MutantManager;
import mujava.MutantTable;
import mujava.MuJavaProject;
import mujava.ProjectManager;
import org.eclipse.jdt.core.IJavaElement;
import mujava.gen.GenericCodeWriter;
import openjava.mop.FileEnvironment;
import openjava.ptree.ClassDeclaration;
import openjava.ptree.CompilationUnit;
import openjava.ptree.FieldDeclaration;
import openjava.ptree.ModifierList;
import openjava.ptree.ParseTreeException;

/**
 * <p>Description: </p>
 * <p>Copyright: Copyright (c) 2005 by Yu-Seung Ma, ALL RIGHTS RESERVED </p>
 * @author Yu-Seung Ma
 * @version 1.0
 */

public class JSI extends mujava.op.util.Mutator {

	Vector nonStaticFields;

	boolean isField;

	public JSI(MuJavaProject project, IJavaElement originalSourceFile, FileEnvironment file_env,
			ClassDeclaration cdecl, CompilationUnit comp_unit) {
		super(file_env, comp_unit, project, originalSourceFile, "JSI");
		nonStaticFields = new Vector();
		isField = false;
	}

	public void visit(FieldDeclaration p) throws ParseTreeException {
		if (!(p.getModifiers().contains(ModifierList.STATIC))) {
			// nonStaticFields.add(p);
			outputToFile(p);
		}
	}

	/*
	 public void visit( ClassDeclaration p ) throws ParseTreeException {
	 if(p.getName().equals(MutationSystem.CLASS_NAME)){
	 super.visit(p);
	 for(int i=0;i<nonStaticFields.size();i++){
	 outputToFile((FieldDeclaration)(nonStaticFields.get(i)));
	 }
	 }
	 }

	 public void visit( MethodDeclaration p ) throws ParseTreeException {
	 if(!(p.getModifiers().contains(ModifierList.STATIC))){
	 super.visit(p);
	 }
	 }

	 public void visit( Variable p ) throws ParseTreeException {
	 Vector v = new Vector();
	 for(int i=0;i<nonStaticFields.size();i++){
	 FieldDeclaration f = (FieldDeclaration)nonStaticFields.get(i);
	 if(p.toString().equals(f.getName())){
	 v.add(f);
	 }
	 }
	 for(int i=0;i<v.size();i++){
	 nonStaticFields.remove(v.get(i));
	 }
	 }
	 */

	@Override
	protected int getMutantType() {
		return IMutantInfo.CLASS;
	}

	@Override
	protected GenericCodeWriter getMutantCodeWriter(IMutantInfo mutantFile,
			Object[] args) throws IOException {
		if(args.length == 1 && args[0] instanceof FieldDeclaration) {
			JSI_Writer mutantWriter = new JSI_Writer(mutantFile);
			mutantWriter.setMutant((FieldDeclaration)args[0]);
			return mutantWriter;
		}
		
		assert(false);
		return null;
	}
}
