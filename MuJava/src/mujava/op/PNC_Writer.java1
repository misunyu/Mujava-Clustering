////////////////////////////////////////////////////////////////////////////
// Module : PNC_Writer.java
// Author : Ma, Yu-Seung
// COPYRIGHT 2005 by Yu-Seung Ma, ALL RIGHTS RESERVED.
////////////////////////////////////////////////////////////////////////////

package mujava.op;

import java.io.IOException;

import mujava.IMutantInfo;
import mugamma.MutantCodeWriter;
import openjava.ptree.AllocationExpression;
import openjava.ptree.Expression;
import openjava.ptree.ExpressionList;
import openjava.ptree.MemberDeclarationList;
import openjava.ptree.ParseTree;
import openjava.ptree.ParseTreeException;
import openjava.ptree.TypeName;

/**
 * <p>
 * Description:
 * </p>
 * <p>
 * Copyright: Copyright (c) 2005 by Yu-Seung Ma, ALL RIGHTS RESERVED
 * </p>
 * 
 * @author Yu-Seung Ma
 * @version 1.0
 */

public class PNC_Writer extends MutantCodeWriter {

	AllocationExpression original = null;

	AllocationExpression mutant = null;

	public void setMutant(AllocationExpression original,
			AllocationExpression mutant) {
		this.original = original;
		this.mutant = mutant;
	}

	public PNC_Writer(IMutantInfo mutantFile) throws IOException {
		super(mutantFile);
	}

	boolean eq(ParseTree p, ParseTree q) {
		if (p == null && q == null)
			return true;
		if (p == null || q == null)
			return false;
		return (p.getObjectID() == q.getObjectID());
	}

	public void visit(AllocationExpression p) throws ParseTreeException {
		if (eq(p, original)) {
			// -------------------------------------------------------------
			super.mutantInfo.setChangeLocation(getLineNumber());
			visit(mutant);
			super.mutantInfo.setChangeLog(removeNewline(original.toString() + " => "
					+ mutant.toString()));
			// -------------------------------------------------------------
		} else {
			Expression encloser = p.getEncloser();
			if (encloser != null) {
				encloser.accept(this);
				out.print(" . ");
			}

			out.print("new ");

			TypeName tn = p.getClassType();
			tn.accept(this);

			ExpressionList args = p.getArguments();
			writeArguments(args);

			MemberDeclarationList mdlst = p.getClassBody();
			if (mdlst != null) {
				out.println("{");
				pushNest();
				mdlst.accept(this);
				popNest();
				writeTab();
				out.print("}");
			}
		}
	}

}
