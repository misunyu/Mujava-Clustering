////////////////////////////////////////////////////////////////////////////
// Module : IOD_Writer.java
// Author : Ma, Yu-Seung
// COPYRIGHT 2005 by Yu-Seung Ma, ALL RIGHTS RESERVED.
////////////////////////////////////////////////////////////////////////////

package mujava.op;

import java.io.IOException;

import mujava.IMutantInfo;
import mugamma.MutantCodeWriter;
import openjava.ptree.MethodDeclaration;
import openjava.ptree.ModifierList;
import openjava.ptree.ParameterList;
import openjava.ptree.ParseTree;
import openjava.ptree.ParseTreeException;
import openjava.ptree.TypeName;

/**
 * <p>
 * Description: Write a IOD mutant
 * </p>
 * <p>
 * Copyright: Copyright (c) 2005 by Yu-Seung Ma, ALL RIGHTS RESERVED
 * </p>
 * 
 * @author Yu-Seung Ma
 * @version 1.0
 */

public class IOD_Writer extends MutantCodeWriter {

	MethodDeclaration mutant = null;

	public void setMutant(MethodDeclaration mutant) {
		this.mutant = mutant;
	}

	public IOD_Writer(IMutantInfo mutantFile) throws IOException {
		super(mutantFile);
	}

	boolean eq(ParseTree p, ParseTree q) {
		if (p == null && q == null)
			return true;
		if (p == null || q == null)
			return false;
		return (p.getObjectID() == q.getObjectID());
	}

	public void visit(MethodDeclaration p) throws ParseTreeException {
		if (!eq(p, mutant)) {
			super.visit(p);
		} else {
			// -----------------------------------------------------
			super.mutantInfo.setChangeLocation(getLineNumber());
			String temp = mutant.getModifiers().toString() + " "
					+ mutant.getReturnType().getName() + " " + mutant.getName()
					+ "(" + mutant.getParameters().toString() + ")";
			super.mutantInfo.setChangeLog(removeNewline(temp)+ " is deleted.");
			// ----------------------------------------------------
			writeTab();
			out.print("// ");

			/* ModifierList */
			ModifierList modifs = p.getModifiers();
			if (modifs != null) {
				modifs.accept(this);
				if (!modifs.isEmptyAsRegular())
					out.print(" ");
			}

			TypeName ts = p.getReturnType();
			ts.accept(this);

			out.print(" ");

			String name = p.getName();
			out.print(name);

			ParameterList params = p.getParameters();
			out.print("(");
			if (!params.isEmpty()) {
				out.print(" ");
				params.accept(this);
				out.print(" ");
			} else {
				params.accept(this);
			}
			out.print(")");

			TypeName[] tnl = p.getThrows();
			if (tnl.length != 0) {
				out.println();
				increaseLineNumber();
				writeTab();
				writeTab();
				out.print("// throws ");
				tnl[0].accept(this);
				for (int i = 1; i < tnl.length; ++i) {
					out.print(", ");
					tnl[i].accept(this);
				}
			}
			out.println("{ ... }");
			increaseLineNumber();
		}
	}
}
