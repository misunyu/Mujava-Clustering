////////////////////////////////////////////////////////////////////////////
// Module : PPD.java
// Author : Ma, Yu-Seung
// COPYRIGHT 2005 by Yu-Seung Ma, ALL RIGHTS RESERVED.
////////////////////////////////////////////////////////////////////////////

package mujava.op;

import java.io.IOException;

import mujava.IMutantInfo;
import mujava.MutantManager;
import mujava.MutantTable;
import mujava.MutationSystem;
import mujava.MuJavaProject;
import mujava.ProjectManager;
import org.eclipse.jdt.core.IJavaElement;
import mujava.gen.GenericCodeWriter;
import mujava.op.basic.AODS_Writer;
import mujava.util.InheritanceINFO;
import openjava.mop.FileEnvironment;
import openjava.ptree.ClassDeclaration;
import openjava.ptree.CompilationUnit;
import openjava.ptree.ConstructorDeclaration;
import openjava.ptree.MethodDeclaration;
import openjava.ptree.Parameter;
import openjava.ptree.ParseTreeException;
import openjava.ptree.TypeName;
import openjava.ptree.UnaryExpression;

/**
 * <p>Description: </p>
 * <p>Copyright: Copyright (c) 2005 by Yu-Seung Ma, ALL RIGHTS RESERVED </p>
 * @author Yu-Seung Ma
 * @version 1.0
  */

public class PPD extends mujava.op.util.PolymorphicMutator
{

  MethodDeclaration currentMethod = null;

  public PPD(MuJavaProject project, IJavaElement originalSourceFile, FileEnvironment file_env,ClassDeclaration cdecl,
    CompilationUnit comp_unit)
  {
	super( file_env, comp_unit, project, originalSourceFile, "PPD" );
  }

  public void visit(MethodDeclaration p) throws ParseTreeException {
		if(p.getName().equals("main")) return;
    currentMethod = p;
    if(p.getBody()!=null)
      super.visit(p);
  }

  public void visit( ConstructorDeclaration p ) throws ParseTreeException{
  }

  public void visit( Parameter p ) throws ParseTreeException {
    this.evaluateDown( p );
    if(MutationSystem.isPrimitive(getType(p.getTypeSpecifier()))) return;
    String original_class = p.getTypeSpecifier().getName();
    InheritanceINFO inf = MutationSystem.getInheritanceInfo(original_class);
    if(inf==null) return;
    if(inf.getParent()!=null){
      generateMutant(p,inf.getParent());
    }else{
      if(original_class.equals("java.lang.Object")) return;
      try{
        Class super_class = Class.forName(original_class).getSuperclass();
        if(!((super_class==null)||(super_class.getName().equals("java.lang.Object"))))
            generateMutant(p,super_class.getName());
      }catch(Exception e){
        return;
      }
    }
    this.evaluateUp( p );
  }

  public void generateMutant(Parameter p, String parent){
    String declared_type = p.getTypeSpecifier().getName();
    if(hasHidingVariable(declared_type,parent)){
      Parameter mutant = (Parameter)p.makeRecursiveCopy();
      mutant.setTypeSpecifier(new TypeName(parent));
      outputToFile(p,mutant);
    }
  }

  public void generateMutant(Parameter p, InheritanceINFO parent){
    String declared_type = p.getTypeSpecifier().getName();
    String parent_type = parent.getClassName();
    if(hasHidingVariable(declared_type,parent_type)){
      Parameter mutant = (Parameter)p.makeRecursiveCopy();
      mutant.setTypeSpecifier(new TypeName(parent.getClassName()));
      outputToFile(p,mutant);
    }
    if(parent.getParent()!=null){
      generateMutant(p,parent.getParent());
    }
  }

	@Override
   protected int getMutantType() {
   	return IMutantInfo.CLASS;
   }

@Override
protected GenericCodeWriter getMutantCodeWriter(IMutantInfo mutantFile, Object[] args) throws IOException {
	if(args.length == 2 && 	args[0] instanceof Parameter && args[1] instanceof Parameter) {
		PPD_Writer mutantWriter = new PPD_Writer(mutantFile);
		mutantWriter.setMutant(currentMethod, (Parameter)args[0], (Parameter)args[1]);
		
		return  mutantWriter;
	}
	
	assert(false);
	return null;
}
}
