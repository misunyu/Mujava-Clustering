////////////////////////////////////////////////////////////////////////////
// Module : PMD.java
// Author : Ma, Yu-Seung
// COPYRIGHT 2005 by Yu-Seung Ma, ALL RIGHTS RESERVED.
////////////////////////////////////////////////////////////////////////////

package mujava.op;

import java.io.IOException;

import mujava.IMutantInfo;
import mujava.MuJavaMutantInfo;
import mujava.MutantManager;
import mujava.MutantTable;
import mujava.MutationSystem;
import mujava.MuJavaProject;
import mujava.ProjectManager;
import org.eclipse.jdt.core.IJavaElement;
import mujava.gen.GenericCodeWriter;
import mujava.op.basic.AODS_Writer;
import mujava.util.InheritanceINFO;
import openjava.mop.FileEnvironment;
import openjava.ptree.ClassDeclaration;
import openjava.ptree.CompilationUnit;
import openjava.ptree.FieldDeclaration;
import openjava.ptree.ParseTreeException;
import openjava.ptree.TypeName;
import openjava.ptree.UnaryExpression;
import openjava.ptree.VariableDeclaration;

/**
 * <p>
 * Description:
 * </p>
 * <p>
 * Copyright: Copyright (c) 2005 by Yu-Seung Ma, ALL RIGHTS RESERVED
 * </p>
 * 
 * @author Yu-Seung Ma
 * @version 1.0
 */

public class PMD extends mujava.op.util.PolymorphicMutator {
	public PMD(MuJavaProject project, IJavaElement originalSourceFile, FileEnvironment file_env,
			ClassDeclaration cdecl, CompilationUnit comp_unit) {
		super(file_env, comp_unit, project, originalSourceFile, "PMD");
	}

	public void visit(VariableDeclaration p) throws ParseTreeException {
		this.evaluateDown(p);
		if (MutationSystem.isPrimitive(getType(p.getTypeSpecifier())))
			return;
		String original_class = p.getTypeSpecifier().getName();
		// if(!original_class.equals("org.gjt.sp.jedit.textarea.JEditTextArea"))
		// return;
		InheritanceINFO inf = MutationSystem.getInheritanceInfo(original_class);
		if (inf == null)
			return;
		if (inf.getParent() != null) {
			generateMutant(p, inf.getParent());
		} else {
			if (original_class.equals("java.lang.Object"))
				return;
			try {
				Class super_class = Class.forName(original_class)
						.getSuperclass();
				if (!((super_class == null) || (super_class.getName()
						.equals("java.lang.Object"))))
					generateMutant(p, super_class.getName());
			} catch (Exception e) {
				return;
			}
		}
	}

	public void generateMutant(VariableDeclaration p, String parent) {
		String declared_type = p.getTypeSpecifier().getName();
		if (hasHidingVariable(declared_type, parent)) {
			VariableDeclaration mutant = (VariableDeclaration) p
					.makeRecursiveCopy();
			mutant.setTypeSpecifier(new TypeName(parent));
			outputToFile(p, mutant);
		}
	}

	public void generateMutant(VariableDeclaration p, InheritanceINFO parent) {
		String declared_type = p.getTypeSpecifier().getName();
		String parent_type = parent.getClassName();
		if (hasHidingVariable(declared_type, parent_type)) {
			VariableDeclaration mutant = (VariableDeclaration) p
					.makeRecursiveCopy();
			mutant.setTypeSpecifier(new TypeName(parent_type));
			outputToFile(p, mutant);
		}
		if (parent.getParent() != null) {
			generateMutant(p, parent.getParent());
		}
	}

	public void generateMutant(FieldDeclaration p, String parent) {
		String declared_type = p.getTypeSpecifier().getName();
		if (hasHidingVariable(declared_type, parent)) {
			FieldDeclaration mutant = (FieldDeclaration) p.makeRecursiveCopy();
			mutant.setTypeSpecifier(new TypeName(parent));
			outputToFile(p, mutant);
		}
	}

	

	public void generateMutant(FieldDeclaration p, InheritanceINFO parent) {
		String declared_type = p.getTypeSpecifier().getName();
		String parent_type = parent.getClassName();
		if (hasHidingVariable(declared_type, parent_type)) {
			FieldDeclaration mutant = (FieldDeclaration) p.makeRecursiveCopy();
			mutant.setTypeSpecifier(new TypeName(parent.getClassName()));
			outputToFile(p, mutant);
		}
		if (parent.getParent() != null) {
			generateMutant(p, parent.getParent());
		}
	}

	public void visit(FieldDeclaration p) throws ParseTreeException {
		if (MutationSystem.isPrimitive(getType(p.getTypeSpecifier())))
			return;
		String original_class = p.getTypeSpecifier().getName();
		InheritanceINFO inf = MutationSystem.getInheritanceInfo(original_class);
		if (inf == null)
			return;
		if (inf.getParent() != null) {
			generateMutant(p, inf.getParent());
		} else {
			if (original_class.equals("java.lang.Object"))
				return;
			try {
				Class super_class = Class.forName(original_class)
						.getSuperclass();
				if (!((super_class == null) || (super_class.getName()
						.equals("java.lang.Object"))))
					generateMutant(p, super_class.getName());
			} catch (Exception e) {
				return;
			}
		}
	}

	@Override
	protected int getMutantType() {
		return IMutantInfo.CLASS;
	}

	@Override
	protected GenericCodeWriter getMutantCodeWriter(IMutantInfo mutantFile,
			Object[] args) throws IOException {
		if (args.length == 2) {
			if (args[0] instanceof FieldDeclaration
					&& args[1] instanceof FieldDeclaration) {
				PMD_Writer mutantWriter = new PMD_Writer(mutantFile);
				mutantWriter.setMutant((FieldDeclaration) args[0],
						(FieldDeclaration) args[1]);

				return mutantWriter;
			} else if (args[0] instanceof VariableDeclaration
					&& args[1] instanceof VariableDeclaration) {
				PMD_Writer mutantWriter = new PMD_Writer(mutantFile);
				mutantWriter.setMutant((VariableDeclaration) args[0],
						(VariableDeclaration) args[1]);

				return mutantWriter;

			}
		}
		assert (false);
		return null;
	}

}
