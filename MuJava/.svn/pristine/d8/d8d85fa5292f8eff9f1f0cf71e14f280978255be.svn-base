////////////////////////////////////////////////////////////////////////////
// Module : PNC.java
// Author : Ma, Yu-Seung
// COPYRIGHT 2005 by Yu-Seung Ma, ALL RIGHTS RESERVED.
////////////////////////////////////////////////////////////////////////////

package mujava.op;

import java.io.IOException;
import java.lang.reflect.Method;
import java.util.Vector;

import mujava.IMutantInfo;
import mujava.MuJavaMutantInfo;
import mujava.MutantManager;
import mujava.MutantTable;
import mujava.MutationSystem;
import mujava.MuJavaProject;
import mujava.ProjectManager;
import org.eclipse.jdt.core.IJavaElement;
import mujava.gen.GenericCodeWriter;
import mujava.op.basic.AODS_Writer;
import mujava.util.InheritanceINFO;
import openjava.mop.FileEnvironment;
import openjava.mop.OJClass;
import openjava.mop.OJMethod;
import openjava.ptree.AllocationExpression;
import openjava.ptree.ClassDeclaration;
import openjava.ptree.CompilationUnit;
import openjava.ptree.ParseTreeException;
import openjava.ptree.TypeName;
import openjava.ptree.UnaryExpression;

/**
 * <p>Description: </p>
 * <p>Copyright: Copyright (c) 2005 by Yu-Seung Ma, ALL RIGHTS RESERVED </p>
 * @author Yu-Seung Ma
 * @version 1.0
  */

public class PNC extends mujava.op.util.Mutator
{

  public PNC(MuJavaProject project, IJavaElement originalSourceFile, FileEnvironment file_env,ClassDeclaration cdecl,
    CompilationUnit comp_unit)
  {
	 super( file_env,comp_unit, project, originalSourceFile, "PNC" );
  }

  public void generateMutants(OJClass type, AllocationExpression p,Vector child){
    // Does not care types of argument
    for(int i=0;i<child.size();i++){
      InheritanceINFO info = (InheritanceINFO)child.get(i);
      // Examine equivalent -- by examine if child class has overriding method.
      if(hasOverridingMethod(type,info)){
        AllocationExpression mutant = (AllocationExpression)p.makeRecursiveCopy();
        mutant.setClassType(new TypeName(info.getClassName()));
        outputToFile(p,mutant);
      }
      generateMutants(type,p,info.getChilds());
    }
  }

  public boolean hasOverridingMethod(OJClass clazz, InheritanceINFO child){
    try{
      Class child_class = Class.forName(child.getClassName());
      Method[] child_methods = child_class.getDeclaredMethods();
      OJMethod[] parent_methods = clazz.getDeclaredMethods();
      if( ((child_methods==null)||(child_methods.length==0))
        || ((parent_methods==null)||(parent_methods.length==0)) ) return false;

      for(int i=0;i<parent_methods.length;i++){
        for(int j=0;j<child_methods.length;j++){
          if(isOverridingMethod(parent_methods[i],child_methods[j])) return true;
        }
      }
      return false;
    }catch(Exception e){
      e.printStackTrace();
      return false;
    }
  }

  boolean isOverridingMethod(OJMethod parent,Method child){
    if(parent.getModifiers().isAbstract()) return false;
    if( !(parent.getName().equals(child.getName()))) return false;
    if( !(parent.getReturnType().getName().equals(child.getReturnType().getName()))) return false;
    OJClass[] parent_pars = parent.getParameterTypes();
    Class[] child_pars = child.getParameterTypes();
    if( ((parent_pars==null)||(parent_pars.length==0))
        && ((child_pars==null)||(child_pars.length==0)) ) return true;
    if(parent_pars.length!=child_pars.length) return false;
    for(int i=0;i<parent_pars.length;i++){
      if( !(parent_pars[i].getName().equals(child_pars[i].getName()))) return false;
    }
    return true;
  }



    public void visit( AllocationExpression p ) throws ParseTreeException {
      String original_name = p.getClassType().getName();
      OJClass type = getType(p.getClassType());
      if(MutationSystem.isPrimitive(type)){
        super.visit(p);
      }else{
        InheritanceINFO inf = MutationSystem.getInheritanceInfo(original_name);
        if(inf!=null) generateMutants(type,p,inf.getChilds());
      }
    }

   /* --- Old Version
   // ---------------------------------
  private boolean pncPossible(String p, String c,ExpressionList arg_list){
    try{
      OJClass clazz;
      OJClass parent_class;
      clazz = OJClass.forName(c);
      if(clazz.getName().equals(p)) return false;
      while( !(clazz.getName().equals("java.lang.Object")) ){
        parent_class = clazz.getSuperclass();
        if(parent_class.getName().equals(p)){
          int arg_num = arg_list.size();
          if(arg_num>0){
            OJClass[] types = new OJClass[arg_num];
            for(int j=0;j<arg_num;j++){
              types[j] = getType(arg_list.get(j));
            }
            if(clazz.getDeclaredConstructor(types)!=null) return true;
          }else{
            // default constructor : There is no constructor declared
            if(clazz.getConstructors().length==0) return true;
            // There is one constrcutor which has no arguments
            if(clazz.getConstructor(null)!=null) return true;
          }
        }
        clazz = parent_class;
      }
      return false;
    }catch(Exception e){
      return false;
    }catch(Error er){
      return false;
    }
  }*/
   @Override
   protected int getMutantType() {
   	return IMutantInfo.CLASS;
   }

@Override
protected GenericCodeWriter getMutantCodeWriter(IMutantInfo mutantFile, Object[] args) throws IOException {
	if(args.length == 2 && args[0] instanceof AllocationExpression && args[1] instanceof AllocationExpression) {
		PNC_Writer mutantWriter = new PNC_Writer(mutantFile);
		mutantWriter.setMutant((AllocationExpression) args[0],(AllocationExpression) args[1]);
		
		return  mutantWriter;
	}
	
	assert(false);
	return null;
}
}
