////////////////////////////////////////////////////////////////////////////
// Module : PCC_Writer.java
// Author : Ma, Yu-Seung
// COPYRIGHT 2005 by Yu-Seung Ma, ALL RIGHTS RESERVED.
////////////////////////////////////////////////////////////////////////////

package mujava.op;

import java.io.IOException;

import mujava.IMutantInfo;
import mugamma.MutantCodeWriter;
import openjava.ptree.AssignmentExpression;
import openjava.ptree.BinaryExpression;
import openjava.ptree.CastExpression;
import openjava.ptree.ConditionalExpression;
import openjava.ptree.Expression;
import openjava.ptree.InstanceofExpression;
import openjava.ptree.ParseTree;
import openjava.ptree.ParseTreeException;
import openjava.ptree.UnaryExpression;

/**
 * <p>Description: </p>
 * <p>Copyright: Copyright (c) 2005 by Yu-Seung Ma, ALL RIGHTS RESERVED </p>
 * @author Yu-Seung Ma
 * @version 1.0
  */ 

public class PCC_Writer extends MutantCodeWriter
{

    CastExpression original = null;
    String type = "";

    public void setMutant(CastExpression original,String mutated_type){
      this.original = original;
      this.type = mutated_type;
    }

    public PCC_Writer(IMutantInfo mutantFile) throws IOException {
		super(mutantFile);
	}

    boolean eq(ParseTree p, ParseTree q ) {
		if(p == null && q == null)  return true;
		if(p == null || q == null)  return false;
		return (p.getObjectID() == q.getObjectID());
    	}

    public void visit( CastExpression p )
	throws ParseTreeException
    {
      if(eq(p, original)){
        out.print( "(" + type + ") ");
        Expression expr = p.getExpression();
        if(expr instanceof AssignmentExpression
           || expr instanceof ConditionalExpression
           || expr instanceof BinaryExpression
           || expr instanceof InstanceofExpression
           || expr instanceof UnaryExpression){
	    writeParenthesis( expr );
        } else {
	    expr.accept( this );
        }
        // -------------------------------------------------------------
        super.mutantInfo.setChangeLocation(getLineNumber());
        super.mutantInfo.setChangeLog(removeNewline("("+p.getTypeSpecifier().getName()+")  =>  ("+type+")"));
        // -------------------------------------------------------------
      }else{
        super.visit(p);
      }
    }
}
